fragment LoginTokenFields on LoginToken {
  id
  userId
  approved
  expires
  createdAt
  email
  secret
  ip
  userAgent
  userAgentRaw
  geo
  domain
}

fragment LoginToken on LoginToken {
  ...LoginTokenFields
  user {
    ...UserFields
  }
}

query findUniqueLoginToken($where: LoginTokenWhereUniqueInput!) {
  findUniqueLoginToken(where: $where) {
    ...LoginToken
  }
}

query findManyLoginToken(
  $where: LoginTokenWhereInput
  $orderBy: [LoginTokenOrderByInput!]
  $cursor: LoginTokenWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyLoginToken(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take) {
    ...LoginToken
  }
}

query findManyLoginTokenCount(
  $where: LoginTokenWhereInput
  $orderBy: [LoginTokenOrderByInput!]
  $cursor: LoginTokenWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyLoginTokenCount(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take)
}

mutation createOneLoginToken($data: LoginTokenCreateInput!) {
  createOneLoginToken(data: $data) {
    ...LoginToken
  }
}

mutation updateOneLoginToken($where: LoginTokenWhereUniqueInput!, $data: LoginTokenUpdateInput!) {
  updateOneLoginToken(where: $where, data: $data) {
    ...LoginToken
  }
}

mutation deleteOneLoginToken($where: LoginTokenWhereUniqueInput!) {
  deleteOneLoginToken(where: $where) {
    ...LoginToken
  }
}

mutation deleteManyLoginToken($where: LoginTokenWhereInput) {
  deleteManyLoginToken(where: $where) {
    count
  }
}

mutation updateManyLoginToken($where: LoginTokenWhereInput, $data: LoginTokenUpdateManyMutationInput!) {
  updateManyLoginToken(where: $where, data: $data) {
    count
  }
}
