generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "nApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  doImage       Json?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  loginTokens   LoginToken[]
  comments      Comment[]
}

model LoginToken {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  approved     Boolean  @default(false)
  expires      DateTime
  createdAt    DateTime @default(now())
  email        String
  secret       String
  ip           String
  userAgent    String
  userAgentRaw String
  geo          Json
  domain       String
}

model RefreshToken {
  loginTokenId String   @id
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  createdAt    DateTime @default(now())
  expires      DateTime
  value        String
  lastActive   DateTime @default(now())
  ip           String
  userAgent    String
  userAgentRaw String
  geo          Json
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  doImage     Json?
  stories     Story[]
  storyOrder  String[]
}

model Story {
  id           String     @id @default(cuid())
  name         String
  description  String?
  doImage      Json?
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  items        Item[]
  requests     Request[]
  itemIds      String[]
}

model Item {
  id          String  @id @default(cuid())
  name        String
  description String?
  doImage     Json?
  stories     Story[]
}

model Request {
  id        String    @id @default(cuid())
  name      String
  story     Story     @relation(fields: [storyId], references: [id])
  storyId   String
  startDate DateTime?
  endDate   DateTime?
  comments  Comment[]
}

model Comment {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  request     Request     @relation(fields: [requestId], references: [id])
  requestId   String
  messageType MessageType
  message     String
  createdAt   DateTime?   @default(now())
}

enum MessageType {
  image
  text
}
